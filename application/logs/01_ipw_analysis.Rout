
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning messages:
1: Setting LC_CTYPE failed, using "C" 
2: Setting LC_COLLATE failed, using "C" 
3: Setting LC_TIME failed, using "C" 
4: Setting LC_MONETARY failed, using "C" 
R > if (grepl("savio2", Sys.info()["nodename"])) {
...   .libPaths("/global/scratch/nhejazi/R")
...   Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS="true")
... }
R > 
R > # read in command line arguments
R > args <- R.utils::commandArgs(trailingOnly = TRUE, asValues = TRUE,
...                              defaults = list(selector_type = "dcar"))
R > 
R > # reference for logging
R > print(args)
$selector_type
[1] "dcar"

R > 
R > library(here)
here() starts at /global/home/users/nhejazi/ipwhal-meta/application
R > library(tidyverse)
-- Attaching packages --------------------------------------- tidyverse 1.3.0 --
v ggplot2 3.3.0     v purrr   0.3.3
v tibble  2.1.3     v dplyr   0.8.5
v tidyr   1.0.2     v stringr 1.4.0
v readr   1.3.1     v forcats 0.5.0
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x dplyr::filter() masks stats::filter()
x dplyr::lag()    masks stats::lag()
R > library(data.table)

Attaching package: 'data.table'

The following objects are masked from 'package:dplyr':

    between, first, last

The following object is masked from 'package:purrr':

    transpose

R > library(origami)
origami v1.0.3: Generalized Framework for Cross-Validation
R > library(hal9001)
Loading required package: Rcpp
hal9001 v0.2.5: The Scalable Highly Adaptive Lasso
R > library(future)
R > library(future.apply)
R > devtools::load_all(here("..", "uhalipw"))
Loading uhalipw

Attaching package: 'testthat'

The following object is masked from 'package:dplyr':

    matches

The following object is masked from 'package:purrr':

    is_null

The following object is masked from 'package:tidyr':

    matches

R > source(here("..", "simulations", "R", "selectors.R"))
R > 
R > # parallelization options
R > options(future.globals.maxSize = 1e10)
R > plan(multiprocess, workers = 20)
R > 
R > # constants used throughout analysis
R > v_folds <- 5
R > ci_level <- 0.95
R > ci_mult <- abs(stats::qnorm(p = (1 - ci_level) / 2))
R > set.seed(281681)
R > 
R > # read in data and modify as per Hernan & Robins
R > nhefs <- read_csv(here("data", "nhefs.csv"))
Parsed with column specification:
cols(
  .default = col_double()
)
See spec(...) for full column specifications.
R > nhefs$cens <- ifelse(is.na(nhefs$wt82), 1, 0)
R > 
R > # provisionally ignore subjects with missing values for weight in 1982
R > nhefs_nmv <- nhefs[which(!is.na(nhefs$wt82)), ]
R > 
R > ###############################################################################
R > # Estimation of IP weights via logistic regression
R > ###############################################################################
R > ## NOTE: code for this analysis was adapted from Hernan & Robins (2020)
R > ## https://remlapmot.github.io/cibookex-r/ip-weighting-and-marginal-structural-models.html#program-12.2
R > 
R > ## 1) fit logistic regression model of smoking cessation
R > ip_glm <- glm(qsmk ~ sex + race + age + as.factor(education) + smokeintensity +
...               smokeyrs + as.factor(exercise) + as.factor(active) + wt71,
...               family = binomial(), data = nhefs_nmv)
R > ### we'll also use the logistic model from Hernan & Robins - why have ^2 terms?
R > ip_glm_robins <- glm(
...   qsmk ~ sex + race + age + I(age ^ 2) +
...     as.factor(education) + smokeintensity +
...     I(smokeintensity ^ 2) + smokeyrs + I(smokeyrs ^ 2) +
...     as.factor(exercise) + as.factor(active) + wt71 + I(wt71 ^ 2),
...   family = binomial(),
...   data = nhefs_nmv
... )
R > 
R > ## 2) compute predicted probability of smoking cessation
R > ipw_classical <- lapply(list(ip_glm, ip_glm_robins), function(ip_glm) {
... # predict for the given IPW model
...   pred_qsmk_obs <- ifelse(nhefs_nmv$qsmk == 0,
...                           1 - predict(ip_glm, type = "response"),
...                           predict(ip_glm, type = "response"))
...   nhefs_nmv$ip_glm <- 1 / pred_qsmk_obs
... 
...   ## 3) construct IPW estimator based on parametric IP weights
...   tsm_tx_ipw_glm <- mean(with(nhefs_nmv, (qsmk * ip_glm) * wt82_71))
...   eif_tx_ipw_glm <- with(nhefs_nmv, (qsmk * ip_glm) * wt82_71) - tsm_tx_ipw_glm
...   var_tx_ipw_glm <- var(eif_tx_ipw_glm) / nrow(nhefs_nmv)
...   tsm_ct_ipw_glm <- mean(with(nhefs_nmv, ((1 - qsmk) * ip_glm) * wt82_71))
...   eif_ct_ipw_glm <- with(nhefs_nmv, ((1 - qsmk) * ip_glm) * wt82_71) -
...     tsm_ct_ipw_glm
...   var_ct_ipw_glm <- var(eif_ct_ipw_glm) / nrow(nhefs_nmv)
...   psi_ate_ipw_glm <- tsm_tx_ipw_glm - tsm_ct_ipw_glm
...   var_ate_ipw_glm <- var(eif_tx_ipw_glm - eif_ct_ipw_glm) / nrow(nhefs_nmv)
... 
...   ## 4) make summary table
...   ipw_glm_summary <- list(qsmk = c("no", "yes", "ate"),
...                           psi_ipw = c(tsm_ct_ipw_glm, tsm_tx_ipw_glm,
...                                       psi_ate_ipw_glm),
...                           var_ipw = c(var_ct_ipw_glm, var_tx_ipw_glm,
...                                       var_ate_ipw_glm)) %>%
...     as_tibble() %>%
...     mutate(
...       ci_lwr = psi_ipw - ci_mult * sqrt(var_ipw),
...       ci_upr = psi_ipw + ci_mult * sqrt(var_ipw)
...     )
...   return(ipw_glm_summary)
... }) %>% set_names(c("main_terms", "quadratic_robins"))
R > 
R > ###############################################################################
R > # Estimation of IP weights via undersmoothed HAL
R > ###############################################################################
R > 
R > ## 1) set up simulation parameters and dataset
R > Mncv_max <- 500
R > lambda_seq <- exp(seq(-0.5, -20, length = 1e4))
R > gtrunc_seq <- round(seq(0.01, 0.2, length.out = 20), 2)
R > 
R > ### setting up data
R > nhefs_nmv <- as.data.table(nhefs_nmv)
R > data_tx_tsm <- copy(nhefs_nmv)[, qsmk := 1]
R > data_ct_tsm <- copy(nhefs_nmv)[, qsmk := 0]
R > folds <- make_folds(nhefs_nmv, V = v_folds)
R > folds_by_ids <- folds2foldvec(folds)
R > names_w <- c("sex", "race", "age", "education", "smokeintensity", "smokeyrs",
...              "exercise", "active", "wt71")
R > names_noty <- c("qsmk", names_w)
R > 
R > ## 2) run CV-HAL to get CV-estimate of L1 norm and sequence
R > gn_cvhal_fit <- fit_hal(X = as.matrix(nhefs_nmv[, ..names_w]),
...                         Y = nhefs_nmv$qsmk,
...                         max_degree = 4,
...                         fit_type = "glmnet",
...                         foldid = folds_by_ids,
...                         use_min = TRUE,
...                         family = "binomial",
...                         cv_select = TRUE,
...                         standardize = FALSE,
...                         yolo = FALSE)
R > gn_cv_pred <- predict(gn_cvhal_fit, new_data = nhefs_nmv)
R > L1_cv <- sum(abs(gn_cvhal_fit$coef))
R > lambda_cv <- gn_cvhal_fit$lambda_star
R > L1_seq <- seq(L1_cv, Mncv_max * L1_cv, length.out = 5000)
R > 
R > ## 2) run under-smoothed HAL for the sequence of L1 norms
R > gn_ipw_hal <- fit_gn_ipw(data_in = nhefs_nmv, folds = folds,
...                          x_names = names_w, y_names = "qsmk",
...                          L1_seq = L1_seq, lambda_seq = lambda_seq)
R > 
R > ## 3) need Q_n --- but this doesn't need to be undersmoothed: use CV-HAL
R > Qn_cvhal_fit <- fit_hal(X = as.matrix(nhefs_nmv[, ..names_noty]),
...                         Y = nhefs_nmv$wt82_71,
...                         max_degree = 4,
...                         fit_type = "glmnet",
...                         foldid = folds_by_ids,
...                         use_min = TRUE,
...                         family = "gaussian",
...                         cv_select = TRUE,
...                         standardize = FALSE,
...                         yolo = FALSE)
R > Qn_tx_tsm_pred <- predict(Qn_cvhal_fit,
...                           new_data = as.matrix(data_tx_tsm[, ..names_noty]))
R > Qn_ct_tsm_pred <- predict(Qn_cvhal_fit,
...                           new_data = as.matrix(data_ct_tsm[, ..names_noty]))
R > 
R > ## 4) build IPW estimators and compute variance based on influence function
R > ipw_tx_gtrunc <- lapply(gtrunc_seq, function(gtrunc) {
...   ipw <- build_ipw(gn_uhal = gn_ipw_hal$gn_cv,
...                    a = nhefs_nmv$qsmk,
...                    y = nhefs_nmv$wt82_71,
...                    Qn_tsm = Qn_tx_tsm_pred,
...                    bound_gn = gtrunc,
...                    est_type = "ht")
...   return(ipw)
... }) %>% set_names(paste0("g_delta_", gtrunc_seq))
R > 
R > ipw_ct_gtrunc <- lapply(gtrunc_seq, function(gtrunc) {
...   ipw <- build_ipw(gn_uhal = (1 - gn_ipw_hal$gn_cv),
...                    a = (1 - nhefs_nmv$qsmk),
...                    y = nhefs_nmv$wt82_71,
...                    Qn_tsm = Qn_ct_tsm_pred,
...                    bound_gn = gtrunc,
...                    est_type = "ht")
... }) %>% set_names(paste0("g_delta_", gtrunc_seq))
R > 
R > 
R > ## 5) select IPW estimator and gn as minimizer of D_CAR/score criterion
R > ### compute estimator + EIF for truncated estimator variant
R > if (args$selector_type == "dcar") {
...   tx_est_trunc <- dcar_selector(ipw_gtrunc = ipw_tx_gtrunc,
...                                 L1_seq = L1_seq,
...                                 est_type = "usm",
...                                 gtrunc_type = "joint",
...                                 use_eff_bound = FALSE)
...   print(tx_est_trunc$dcar_mean)
...   ct_est_trunc <- dcar_selector(ipw_gtrunc = ipw_ct_gtrunc,
...                                 L1_seq = L1_seq,
...                                 est_type = "usm",
...                                 gtrunc_type = "joint",
...                                 use_eff_bound = FALSE)
...   print(ct_est_trunc$dcar_mean)
... } else if (args$selector_type == "score") {
...   tx_est_trunc <- score_selector(ipw_gtrunc = ipw_tx_gtrunc,
...                                  gn_usm_fit = gn_ipw_hal,
...                                  A_obs = as.numeric(nhefs_nmv$qsmk),
...                                  L1_seq = L1_seq,
...                                  est_type = "usm_mintrunc")
...   print(tx_est_trunc$score_crit)
...   ct_est_trunc <- dcar_selector(ipw_gtrunc = ipw_ct_gtrunc,
...                                 gn_usm_fit = gn_ipw_hal,
...                                 A_obs = 1 - as.numeric(nhefs_nmv$qsmk),
...                                 L1_seq = L1_seq,
...                                 est_type = "usm_mintrunc")
...   print(ct_est_trunc$score_crit)
... }
[1] 2.069243e-05
[1] 0.1916163
R > 
R > ipw_hal_trunc_summary <- list(
...   qsmk = c("no", "yes", "ate"),
...   psi_ipw = c(ct_est_trunc$psi, tx_est_trunc$psi,
...               tx_est_trunc$psi - ct_est_trunc$psi),
...   var_ipw = c(ct_est_trunc$var_ic, tx_est_trunc$var_ic,
...               var(tx_est_trunc$ic - ct_est_trunc$ic)  / nrow(nhefs_nmv))
... ) %>%
... as_tibble() %>%
... mutate(
...   ci_lwr = psi_ipw - ci_mult * sqrt(var_ipw),
...   ci_upr = psi_ipw + ci_mult * sqrt(var_ipw)
... )
R > 
R > ### compute estimator + EIF for minimally truncated estimator variant
R > tx_est_mintrunc <- dcar_selector(ipw = ipw_tx_gtrunc,
...                                  L1_seq = L1_seq,
...                                  est_type = "usm_mintrunc",
...                                  gtrunc_type = "joint",
...                                  use_eff_bound = FALSE)
R > print(tx_est_mintrunc$dcar_mean)
[1] 0.01341067
R > ct_est_mintrunc <- dcar_selector(ipw = ipw_ct_gtrunc,
...                                  L1_seq = L1_seq,
...                                  est_type = "usm_mintrunc",
...                                  gtrunc_type = "joint",
...                                  use_eff_bound = FALSE)
R > print(ct_est_mintrunc$dcar_mean)
[1] 0.1916163
R > ipw_hal_mintrunc_summary <- list(
...   qsmk = c("no", "yes", "ate"),
...   psi_ipw = c(ct_est_mintrunc$psi, tx_est_mintrunc$psi,
...               tx_est_mintrunc$psi - ct_est_mintrunc$psi),
...   var_ipw = c(ct_est_mintrunc$var_ic, tx_est_mintrunc$var_ic,
...               var(tx_est_mintrunc$ic - ct_est_mintrunc$ic) / nrow(nhefs_nmv))
... ) %>%
... as_tibble() %>%
... mutate(
...   ci_lwr = psi_ipw - ci_mult * sqrt(var_ipw),
...   ci_upr = psi_ipw + ci_mult * sqrt(var_ipw)
... )
R > 
R > 
R > ## 6) for reference, also compute IPW and IC for gn selected by global CV
R > ipw_gcv_tx <- build_ipw(gn_uhal = as.matrix(gn_ipw_hal$gn_cv[, 1]),
...                         a = nhefs_nmv$qsmk,
...                         y = nhefs_nmv$wt82_71,
...                         Qn_tsm = Qn_tx_tsm_pred,
...                         est_type = "ht")
R > ipw_gcv_ct <- build_ipw(gn_uhal = as.matrix(1 - gn_ipw_hal$gn_cv[, 1]),
...                         a = (1 - nhefs_nmv$qsmk),
...                         y = nhefs_nmv$wt82_71,
...                         Qn_tsm = Qn_ct_tsm_pred,
...                         est_type = "ht")
R > ipw_gcv_summary <- list(
...   qsmk = c("no", "yes", "ate"),
...   psi_ipw = c(ipw_gcv_ct$psi, ipw_gcv_tx$psi,
...               ipw_gcv_tx$psi - ipw_gcv_ct$psi),
...   var_ipw = c(ipw_gcv_ct$var_ic, ipw_gcv_tx$var_ic,
...               var(ipw_gcv_tx$ic - ipw_gcv_ct$ic) / nrow(nhefs_nmv))
... ) %>%
... as_tibble() %>%
... mutate(
...   ci_lwr = psi_ipw - ci_mult * sqrt(var_ipw),
...   ci_upr = psi_ipw + ci_mult * sqrt(var_ipw)
... )
R > 
R > 
R > ## 7) construct output from all procedures for tables and visualizations
R > ipw_results <- list(hal_trunc = ipw_hal_trunc_summary,
...                     hal_mintrunc = ipw_hal_mintrunc_summary,
...                     hal_gcv = ipw_gcv_summary,
...                     glm_main = ipw_classical[[1]],
...                     glm_quad = ipw_classical[[2]]) %>%
...   bind_rows(.id = "gn_estim") %>%
...   arrange(qsmk)
R > saveRDS(ipw_results, here("data", paste0("nhefs_ipw_", args$selector_type,
...                                          "_results.rds")))
R > 
> proc.time()
    user   system  elapsed 
1580.433  102.973 1818.323 
